@model Workout_Builder.ViewModels.NewWorkoutVM

@{
    ViewData["Title"] = "New Workout";
}

<h2>New Workout</h2>


<div>
    <form method="post" id="addForm" enctype="multipart/form-data" onsubmit="return clientValidation()">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group">
            <label asp-for="Workout.Name" class="control-label">Workout Name</label>
            <input asp-for="Workout.Name" type="text" class="form-control" />
            <span id="noNameError" class="text-danger" style="display:none;">Workout name is required.</span>
        </div>

        <div id="exercisesSection">
            <h3 id="exercisesLabel">Exercises</h3>
            @{
                var hiddenDivStyling = "";
                for (int i = 0; i < Model.ExerciseModels.Count; i++)
                {
                    if (i != 0)
                    {
                        hiddenDivStyling = "HideOnLoad";
                    }
                    <div id="exerciseDiv_@i" class="row ExerciseDiv @hiddenDivStyling">
                        <br />

                        <div class="row NewExerciseInputs">
                            <div class="action-item col-sm-4 target">
                                <div class="form-group">
                                    <label class="control-label">Exercise Name</label>
                                    <input asp-for="ExerciseModels[i].Exercise.ExerciseType.Name" type="search" class="form-control ExerciseName" autocomplete="off" />
                                    <div class="AutoCompleteDiv"></div>
                                </div>
                            </div>

                            <div class="action-item col-sm-2 target">
                                <div class="form-group">
                                    <label asp-for="ExerciseModels[i].Exercise.NumSets" class="control-label">Number of sets</label>
                                    <select asp-for="ExerciseModels[i].Exercise.NumSets" class="form-select NumSetsInput" aria-label="Default select">
                                        <option selected value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                        <option value="6">6</option>
                                        <option value="7">7</option>
                                        <option value="8">8</option>
                                        <option value="9">9</option>
                                    </select>
                                </div>
                            </div>

                            <div class="action-item col-sm-2 target">
                                <div class="form-group">
                                    <label asp-for="ExerciseModels[i].MasterReps" class="control-label">Number of reps</label>
                                    <input asp-for="ExerciseModels[i].MasterReps" type="number" class="form-control MasterRepsInput" />
                                </div>
                            </div>

                            <div class="action-item col-sm-2 target">
                                <div class="form-group">
                                    <label asp-for="ExerciseModels[i].MasterWeight" class="control-label">Weight</label>
                                    <div style="display: flex;">
                                        <input asp-for="ExerciseModels[i].MasterWeight" type="number" class="form-control MasterWeightInput" style="flex: 1;" />
                                        <span style="flex: 1;">&nbsp Lbs</span>
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="row CustomRowSets HideOnLoad">
                            @{
                                for (int j = 0; j < 9; j++)
                                {
                                    int setNumber = j + 1;
                                    <div class="CustomSetRow CustomSet_@j HideOnLoad">
                                        <span class="SetNumberSpan">Set @setNumber</span>
                                        <div class="action-item col-sm-2 Inline">
                                            <div class="form-group">
                                                <label asp-for="ExerciseModels[i].SetsList[j].Reps" class="control-label">Number of reps</label>
                                                <input asp-for="ExerciseModels[i].SetsList[j].Reps" type="number" class="form-control RepsInput" />
                                            </div>
                                        </div>

                                        <div class="action-item col-sm-2 Inline">
                                            <div class="form-group">
                                                <label asp-for="ExerciseModels[i].SetsList[j].Weight" class="control-label">Weight</label>
                                                <div style="display: flex;">
                                                    <input asp-for="ExerciseModels[i].SetsList[j].Weight" type="number" class="form-control WeightInput" style="flex: 1;" />
                                                    <span style="flex: 1;">&nbsp Lbs</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <div class="action-item col-sm-4 target">
                            <div class="form-group">
                                <br />
                                <button type="button" id="CustomizeSetsButton_@Model.ExerciseModels[i].Order" class="btn btn-success col-sm-5 CustomizeSetsButton">Customize Sets</button>
                                <button type="button" class="deleteExercise btn btn-danger col-sm-5">Delete Exercise</button>
                            </div>
                        </div>

                        @* hidden model properties for this exercise *@
                        <input asp-for="ExerciseModels[i].Order" class="OrderInput" hidden />
                        <input class="CustomSets" value="false" hidden />
                    </div>
                }
            } @* end of for loop *@
        </div>

        <div>
            <button id="addExercise" type="button" class="btn btn-primary">Add Exercise</button>
            <span id="maxExercisesMessage" class="text-danger HideOnLoad">&nbspCannot add more than @Model.MaxNumExercises exercises.</span>
        </div>

        <br />
        <button id="submitButton" type="button" class="btn btn-primary" onclick="PrepareClientValidation()">Create Workout</button>
        <button id="submitForm" type="submit" hidden></button>
        <div id="submitSpinner" class="spinner-border text-primary" role="status" hidden></div>

        @* hidden model properties for workout *@
        <div>
            <input id="numExercises" asp-for="NumExercises" hidden />
        </div>
    </form>
</div>


<button type="button" onclick="getExercises()">Names</button>

@section Scripts {
    <script>

        $(document).ready(function () {

            //prevents pressing Enter to submit form
            $("#addForm").on("keypress", function (e) {
                return e.keyCode != 13;
            });

            //creates first exercise
            //$('#addExercise').click();

            //     //assign delete logic to exercises
            //     $('.DeleteExerciseButton').click(function () {
            //         //hide div and mark it for deletion
            //         $(this).parent().hide();
            //         $(this).parent().find(".DeletedExercise").prop('checked', true);
            //     });

        });

        //////////////////////
        // add new exercise //
        //////////////////////

        //reveal an exercise div if the user hasn't reached the max amount
        $("#addExercise").click(function (e) {
            var numExercises = $("#numExercises").val();

            //check if there are already the max number of exercises
            if (numExercises >= @Model.MaxNumExercises - 1) {
                $("#maxExercisesMessage").show();
                return;
            }
            else {
                //increment number of exercises
                numExercises++;
                $("#numExercises").val(numExercises);

                //reveal exercise div
                var exerciseDiv = "#exerciseDiv_" + numExercises;
                $(exerciseDiv).show();
            }
        });

        //hide error message for max exercises if user clicks elsewhere
        $(".ExerciseDiv").click(function (e) {
            $("#maxExercisesMessage").hide();
        });

        /////////////////////
        // delete exercise //
        /////////////////////



        //replace input fields of selected exercise with data of the exercise below it
        function moveExerciseUp(orderNum) {

        }

        //replace input fields of selected exercise with data of the exercise above it
        function moveExerciseDown(orderNum) {

        }

        ///////////////////////
        // autocomplete box //
        //////////////////////

        function FillAutoCompleteBox(element, value, orderNum) {
            $.ajax({
                type: "POST",
                data: { input: value, order: orderNum },
                url: '/Workout/FillAutoCompleteExercises',
                success: function (result, status, xhr) {
                    if (result != "") {
                        element.html(result);
                        element.show();

                        //hides selectlist if user tabs away from it
                        $(".ExerciseNameSelectList").on("blur", function () {
                            var str = $(this).find(".ExerciseNameSelectList").find(":selected").text();
                            $(this).parent().find(".ExerciseName").val(str);
                            $(this).hide();
                        });
                    }
                    else {
                        element.hide();
                    }
                },
                error: function (xhr, status, error) {
                    alert(xhr + " " + status + " " + error);
                }
            });
        }

        $('.ExerciseName').keyup(function (e) {
            var selectList = $(this).parent().find(".ExerciseNameSelectList");
            if (e.which == 40) {
                if (selectList.is(":hidden")) {
                    return;
                }
                selectList.val(selectList.prop("selectedIndex", 0).val());
                selectList.focus();
                $(this).val(selectList.find(":selected").text());
            }
            else {
                if ($(this).val().length > 2) {
                    FillAutoCompleteBox($(this).parent().find(".AutoCompleteDiv"), $(this).val());
                }
                else {
                    $(this).parent().find(".AutoCompleteDiv").hide();
                }
            }
        });

        //if an option on a selectlist is selected then the name field will be updated to match it
        $(".AutoCompleteDiv").on("change", function () {
            var str = $(this).find(".ExerciseNameSelectList").find(":selected").text();
            $(this).parent().find(".ExerciseName").val(str);
        });

        //hides selectlist if user tabs away from name field
        $(".ExerciseName").on("blur", function () {
        });

        //hides selectlist is the user presses enter while an option is highlighted
        $(".AutoCompleteDiv").on("keyup", function (e) {
            if (e.keyCode == 13) {
                var str = $(this).find(".ExerciseNameSelectList").find(":selected").text();
                $(this).parent().find(".ExerciseName").val(str);
                $(this).hide();
            }
        });

        //hide dropdown if user clicks elsewhere
        $(document).click(function (e) {
            $(".AutoCompleteDiv").hide();
        });


        /////////////////
        // custom sets //
        /////////////////

        //show or hide custom sets if user presses button
        $(".CustomizeSetsButton").click(function (e) {
            var numSets = $(this).parent().parent().parent().find(".NumSetsInput").val();
            var rowElement = $(this).parent().parent().parent().find(".CustomRowSets");

            if (rowElement.is(":hidden")) {
                var startingReps = $(this).parent().parent().parent().find(".MasterRepsInput").val();
                var startingWeight = $(this).parent().parent().parent().find(".MasterWeightInput").val();
                rowElement.show();

                //show customizable sets
                for (var i = 0; i < numSets; i++) {
                    var setID = ".CustomSet_" + i;

                    //when revealing, set the default reps and weight
                    rowElement.find(setID).find(".RepsInput").val(startingReps);
                    rowElement.find(setID).find(".WeightInput").val(startingWeight);
                    rowElement.find(setID).show();

                    //disable overall reps and weight inputs
                    $(this).parent().parent().parent().find(".MasterRepsInput").prop('disabled', true);
                    $(this).parent().parent().parent().find(".MasterWeightInput").prop('disabled', true);
                }
                //change text on button and set customSets variable
                $(this).html("Hide Sets");
                $(this).parent().parent().parent().find(".CustomSets").val("true");
            }
            else {
                //hide all custom set elements
                rowElement.hide();
                var customRowEelements = $(this).parent().parent().parent().find(".CustomSetRow");
                customRowEelements.hide();

                //clear hidden inputs
                $(this).parent().parent().parent().find(".RepsInput").val("");
                $(this).parent().parent().parent().find(".WeightInput").val("");

                //change text on button and set customSets variable
                $(this).html("Customize Sets");
                $(this).parent().parent().parent().find(".CustomSets").val("false");

                //re-enable overall reps and weight inputs
                $(this).parent().parent().parent().find(".MasterRepsInput").prop('disabled', false);
                $(this).parent().parent().parent().find(".MasterWeightInput").prop('disabled', false);
            }
        });

        //change number of custom set rows that are showing if the user changes the total number of sets
        $(".NumSetsInput").on("change", function () {

            var rowElement = $(this).parent().parent().parent().parent().find(".CustomRowSets");
            if (rowElement.is(":hidden")) {
                return;
            }
            else {
                //hide all custom set rows
                var customRowEelements = $(this).parent().parent().parent().parent().find(".CustomSetRow");
                customRowEelements.hide();

                //show the right number of set rows
                var numSets = $(this).val();
                for (var i = 0; i < numSets; i++) {
                    var setName = ".CustomSet_" + i;
                    rowElement.find(setName).show();
                }
            }
        });


        /////////////////////
        // form validation //
        /////////////////////

        var valid = false;
        var doubleSubmit = false;
        function PrepareClientValidation() {

            //disable buttons and show spinner
            $('#submitButton').prop('disabled', true);
            //$('#backToSearchButton').prop('disabled', true);
            $("#submitSpinner").prop('hidden', false);

            //a timeout is used to force the submit button to be disabled and show the spinner
            setTimeout(function () {
                ClientValidation();
            }, 1);
        }

        function ClientValidation() {
            //alert("validation");
            valid = true;

            //if all fields are ok, submit form to controller
            if (valid && !doubleSubmit) {
                doubleSubmit = true;
                SubmitToController();
                //document.getElementById("submitSearchButton").click();
            }
            else {
                $('#submitButton').prop('disabled', false);
                //$('#backToSearchButton').prop('disabled', false);
                $("#submitSpinner").prop('hidden', true);
                valid = false;
            }
        }

        function SubmitToController() {
            $('#addExerciseInput').prop('checked', false);
            $("#submitForm").click();
        }

        //set the bool AddExercise so that the controller knows to add the new exercise to the model
        function AddNewExerciseSubmit() {
            $('#addExerciseInput').prop('checked', true);
            $("#submitForm").click();
        }

        // var exerciseCount = 0;
        // $('#addExercise').click(function () {
        //     $.ajax({
        //         url: '/Workout/NewExercisePartial',
        //         data: {orderNum:exerciseCount},
        //         success: function (partialView) {
        //             $('#exercisesSection').append(partialView);
        //             exerciseCount++;

        //             //assign delete logic to new exercise
        //             $('.deleteExercise').click(function () {
        //                 $(this).parent().parent().parent().remove();
        //             });
        //         }
        //     });
        // });

        // function getExercises() {
        //     alert('hi');
        //     var exercises = [];

        //     const ExerciseNames = $('.ExerciseName').get().map(function (name) {
        //         return name.value;
        //     });
        //     var ExerciseNames = $('.ExerciseName');
        //     alert(ExerciseNames.length);
        //     for (var i = 0; i < ExerciseNames.length; i++) {
        //         alert(ExerciseNames[i]);
        //     }

        //     $.ajax({
        //         type: 'POST',
        //         data: { strings: ExerciseNames },
        //         url: '/Workout/PartialTest',
        //         success: function (e) {
        //             alert("success");
        //         }
        //     });
        // }

        //use this one
        // function getExercises() {
        //     var exercises = [];
        //     var exerciseDivs = $('.ExerciseDiv');

        //     //iterate through exercises and add their info to the dataset
        //     exerciseDivs.each(function () {

        //         //find exercise info
        //         var name = $(this).find(".ExerciseName").val();
        //         var setsNum = $(this).find(".NumSetsInput").val();
        //         var repsNum = $(this).find(".MasterRepsInput").val();
        //         var weightNum = $(this).find(".MasterWeightInput").val();
        //         alert(name + " " + setsNum + " " + repsNum + " " + weightNum);

        //         //find exercise info if user customized sets

        //         //load info into dataset
        //         exercises.push({
        //             Name: name,
        //             SetsNum: setsNum,
        //             RepsNum: repsNum,
        //             WeightNum: weightNum
        //         });
        //     })

        //     for (var i = 0; i < ExerciseNames.length; i++) {
        //         alert(ExerciseNames[i].val())
        //     }
        // }


    </script>
}