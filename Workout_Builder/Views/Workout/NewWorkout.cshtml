@model Workout_Builder.ViewModels.NewWorkoutVM

@{
    ViewData["Title"] = "New Workout";
}

<h2>New Workout</h2>


<div>
    <form method="post" id="AddForm" enctype="multipart/form-data" onsubmit="return clientValidation()">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group">
            <label asp-for="Workout.Name" class="control-label">Workout Name</label>
            <input asp-for="Workout.Name" type="text" class="form-control" />
            <span id="noNameError" class="text-danger" style="display:none;">Workout name is required.</span>
        </div>

        <div id="exercisesSection">
            <h3 id="exercisesLabel">Exercises</h3>
        </div>

        <div>
            <button id="addExercise" type="button" class="btn btn-primary">Add Exercise</button>
        </div>

        <br />
        <button id="submitButton" type="button" class="btn btn-primary" onclick="PrepareClientValidation()">Create Workout</button>
        <div id="submitSpinner" class="spinner-border text-primary" role="status" hidden></div>
    </form>
</div>

<button type="button" onclick="getExercises()">Names</button>

@section Scripts {
    <script>

        var valid = false;
        var doubleSubmit = false;
        function PrepareClientValidation() {

            //disable buttons and show spinner
            $('#submitButton').prop('disabled', true);
            //$('#backToSearchButton').prop('disabled', true);
            $("#submitSpinner").prop('hidden', false);

            //a timeout is used to force the submit button to be disabled and show the spinner
            setTimeout(function () {
                ClientValidation();
            }, 1);
        }

        function ClientValidation() {
            alert("validation");


            //if all fields are ok, submit form to controller
            if (valid && !doubleSubmit) {
                doubleSubmit = true;
                SubmitToController();
                //document.getElementById("submitSearchButton").click();
            }
            else {
                $('#submitButton').prop('disabled', false);
                //$('#backToSearchButton').prop('disabled', false);
                $("#submitSpinner").prop('hidden', true);
                valid = false;
            }
        }

        function SubmitToController() {

        }
        
        var exerciseCount = 0;
        $('#addExercise').click(function () {
            $.ajax({
                url: '/Workout/NewExercisePartial',
                data: {orderNum:exerciseCount},
                success: function (partialView) {
                    $('#exercisesSection').append(partialView);
                    exerciseCount++;

                    //assign delete logic to new exercise
                    $('.deleteExercise').click(function () {
                        //remove item from model list

                        $(this).parent().remove();
                    });
                }
            });
        });

        function getExercises() {
            //alert('hi');
            //var exercises = [];

            const ExerciseNames = $('.ExerciseName').get().map(function (name) {
                return name.value;
            });
            // var ExerciseNames = $('.ExerciseName');
            //alert(ExerciseNames.length);
            // for (var i = 0; i < ExerciseNames.length; i++) {
            //     alert(ExerciseNames[i]);
            // }

            $.ajax({
                type: 'POST',
                data: { strings: ExerciseNames },
                url: '/Workout/PartialTest',
                success: function (e) {
                    alert("success");
                }
            });
        };

    </script>
}